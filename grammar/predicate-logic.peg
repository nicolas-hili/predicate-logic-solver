{

	var boundVariables={};

	function checkPredAndFunctionSymbols (expr) {
    	var isPredicate = (expr.type === "predicate");
        var output = (isPredicate) ? "B" : "D";
        var name = expr.name;
        for (var i = 0; i < expr.args.length; i++) {
        	var arg = expr.args[i];
            if (arg.type === "predicate") {
                error(name+" is defined as "+name+": D -> "+output+" and "
                	+ arg.name + " is defined as "+name+": D -> B."
                    + "Therefore, " + name + "("+arg.name+"(...)) is not consistent.");
            }
        }
    	return true;
    }

    function registerBoundVariable(name) {
    	boundVariables[name] = true;
    }

    function getBoundVariable(name) {
    	return boundVariables[name];
    }
}

Formulas=
	_ formulas:(formula:BinaryFormula _)+ {
    var f = Array();
    for (var i = 0; i < formulas.length; i++) {
        f.push(formulas[i][0]);
    }
    return f;}

BinaryFormula
	= _ '(' _ f:BinaryFormula _ ')' _ {return f;}  /
        f1:Formula _ bin_conn:(bin_conn:BinConn _ f2:BinaryFormula)? {
        if(bin_conn !== null) {
    		var binFormula = {};
    		binFormula.type="binary";
    		binFormula.f1 = f1;
    		binFormula.bin_conn = bin_conn[0];
    		binFormula.f2 = bin_conn[2];
            return binFormula;
    	} else {
        	return f1;
        }
	}

Formula
	=	_ '(' _ f:Formula _ ')' _ { return f; } / // never consumed
    	QuantifiedFormula /
        AtomicFormula /
    	UnaryFormula


AtomicFormula
	= _ e1:BinExpr _ right:(rel_op:RelOp _ e2:BinExpr)? _
    	{
            var atomicFormula = {};
            atomicFormula.type = "atomic";
            atomicFormula.e1 = e1;

            if (right != null) {
            	atomicFormula.rel_op = right[0];
                atomicFormula.e2 = right[2];
            }
            return atomicFormula;
        }

UnaryFormula
	= un_conn:UnConn f:BinaryFormula
    {return {type:"unary", un_conn:un_conn, f:f};}

QuantifiedFormula
	= quant:Quantifier _ variable:BoundVariable _ dom:(':' _ Domain)? _ '.' _ f:BinaryFormula _
    {
    	var quantifiedFormula = {};
        quantifiedFormula.type = "quantified";
        quantifiedFormula.quant = quant;
        quantifiedFormula.variable = variable;
        if (dom !== null)
        	quantifiedFormula.dom = dom[2];
        quantifiedFormula.f = f;
    	return quantifiedFormula;
    }

BinExpr
	= _ '(' _ expr:BinExpr _ ')' _ {return expr;}  /
    _ e1:Expr _ bin_op:( _ bin_op:BinOp _ e2:BinExpr _ )? _
    {
    	if (bin_op != null) {
	        var binExpr = {};
	        binExpr.type = 'binExpr';
	        binExpr.e1 = e1;
    		binExpr.bin_op = bin_op[1];
            binExpr.e2 = bin_op[3];
            return binExpr;
        } else {
        	return e1;
        }
    }

Expr
	= _ '(' _ expr:Expr _ ')' _ { return {expr};}  / // never consumed
      Int /
      Variable /
      Predicate /
      Function

BinConn
	= "&&" / "||" / "->" / "<->"

RelOp
	= "<" / ">" / "="

UnConn
	= "!"

BinOp
	= "+" / "-" / "/" / "*" / "mod"

Int
	= value:[0-9]+ {return value.join('');}

Domain
	= '['_ from:Int _ '..' _ to:Int _ ']'
      {return {from:from, to:to}}

BoundVariable
	= name:[a,b,c,w,x,y,z] {
    	registerBoundVariable(name);
        return name;
    }

Variable
	= name:[a,b,c,w,x,y,z] {
    	if(!getBoundVariable(name)) {
        	error(name+" is not bound to any quantifier.");
        }
    	return name;
      }

Predicate
	= name: [P,Q,R,S,T,U,V] arg:('('first: BinExpr (',' others: BinExpr)*')')? {
    	if (arg != null) {
        	var predicate = {};
            predicate.name = name;
            var args = Array();
            predicate.type = "predicate";
            args.push(arg[1]);
            for (var i = 0; i < arg[2].length; i++) {
            	args.push(arg[2][i][1]);
            }
            predicate.args=args;

            checkPredAndFunctionSymbols(predicate);
            return predicate;
        }
        return {type:"predicate", "name":name};
   	}



Function
	= name: [f,g,h,i,j,k,l] arg:('('first: BinExpr (',' others: BinExpr)*')')? {
    	if (arg != null) {
        	var func = {};
            func.name = name;
            var args = Array();
            func.type = "function";
            args.push(arg[1]);
            for (var i = 0; i < arg[2].length; i++) {
            	args.push(arg[2][i][1]);
            }
            func.args=args;

            checkPredAndFunctionSymbols(func);
            return func;
        }
        return {type:"function", "name":name};
   	}

Quantifier
	= "forall" / "exists"

_ "whitespace"
  = [ \t\n\r]*
